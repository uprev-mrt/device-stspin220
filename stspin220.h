/**
  * @file stspin220.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief Device driver for STSPIN220 device
  *
  *
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "Platforms/Common/platform.h"


/*******************************************************************************
  Sruct                                                                                
*******************************************************************************/
typedef enum{
  SPN_STEP_FULL   = 0b0000,
  SPN_STEP_1_2    = 0b1010,
  SPN_STEP_1_4    = 0b0101,
  SPN_STEP_1_8    = 0b1011,
  SPN_STEP_1_32   = 0b0001,
  SPN_STEP_1_64   = 0b1101,
  SPN_STEP_1_128  = 0b0010,
  SPN_STEP_1_256  = 0b0011
}spn_microstep_modes_e;

typedef enum{
  SPN_DIR_FORWARD,
  SPN_DIR_BACK
}spn_dir_e;

typedef struct{
    mrt_gpio_t mDir;                        /* Direction      */
    mrt_gpio_t mSTCK;                       /* Step clock     */
    mrt_gpio_t mStandby;                    /* Standby/Reset  */
    mrt_gpio_t mMode1;                      /* Standby/Reset  */
    mrt_gpio_t mMode2;                      /* Standby/Reset  */
}stspn_hw_cfg_t;


typedef struct{
    stspn_hw_cfg_t* mHw;                    /* Hardware config*/
    uint32_t mStepsPerMM;                   /* Steps Per MM of actuator*/
    spn_microstep_modes_e mMicroStepMode;   /* Micro Step setting */
    uint32_t mTicksPerStep;                 /* We store this to needing to look it up for each movement*/
}stspin220_t;


/**
  *@brief Initialize
  *@param dev ptr to STSPIN220 device
  *@return MRT_STATUS_OK if test is passed 
  *@return MRT_STATUS_ERROR if test fails
  */
mrt_status_t spn_init(stspin220_t* dev, stspn_hw_cfg_t* hw );

/**
  *@brief writes register of device
  *@param dev ptr to STSPIN220 device
  *@param reg ptr to register definition
  *@param data data to be write
  *@return status (type defined by platform)
  */
#define spn_write_reg(dev, reg, data) regdev_write_reg(&(dev)->mRegDev, (reg), (data))

/**
  *@brief reads register of device
  *@param dev ptr to STSPIN220 device
  *@param reg ptr to register definition
  *@param data ptr to store data
  *@return value of register
  */
#define spn_read_reg(dev, reg) regdev_read_reg(&(dev)->mRegDev, (reg))


/*user-block-bottom-start*/
/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif